<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wire-Cell News (Posts about config)</title><link>http://wirecell.github.io/news/</link><description></description><atom:link href="http://wirecell.github.io/news/categories/config.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:bv@bnl.gov"&gt;Wire-Cell Team&lt;/a&gt; </copyright><lastBuildDate>Thu, 03 Dec 2020 18:53:10 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Wire-Cell fans</title><link>http://wirecell.github.io/news/posts/wire-cell-fans/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
Of course, everyone is a fan of Wire-Cell.  This post isn't about you.
It's about a common pattern that is found in Wire-Cell data flow
graphs and how this pattern is realized at the WCT C++ level and how
to form it in WCT configuration.  
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/wire-cell-fans/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>config</category><category>graph</category><category>user</category><guid>http://wirecell.github.io/news/posts/wire-cell-fans/</guid><pubDate>Thu, 03 Dec 2020 14:50:51 GMT</pubDate></item><item><title>Logging</title><link>http://wirecell.github.io/news/posts/logging/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
Out with &lt;code&gt;cout&lt;/code&gt; and its an error to use &lt;code&gt;cerr&lt;/code&gt;!
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/logging/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cli</category><category>config</category><category>devel</category><guid>http://wirecell.github.io/news/posts/logging/</guid><pubDate>Thu, 25 Apr 2019 18:13:49 GMT</pubDate></item><item><title>Overriding Configuration Parameters</title><link>http://wirecell.github.io/news/posts/overriding-configuration-parameters/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
The WCT configuration language Jsonnet allows to exploit software development patterns such as "don't repeat yourself" (DRY) and object inheritance.  They are exploited to factor a configuration into layers so that it may, in total, serve many uses.  This post describes how to override a parameter from a base object.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/overriding-configuration-parameters/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>config</category><category>uboone</category><guid>http://wirecell.github.io/news/posts/overriding-configuration-parameters/</guid><pubDate>Wed, 15 Aug 2018 13:38:32 GMT</pubDate></item><item><title>Default Config Dumper</title><link>http://wirecell.github.io/news/posts/default-config-dumper/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
WCT is very configurable.  It provides a way for the expert that wrote
the C++ component to provide sane defaults and a way that a user may
override or augment those defaults.  WCT helps such intrepid users to
discover the defaults with the &lt;code&gt;ConfigDumper&lt;/code&gt; WCT app component.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/default-config-dumper/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cli</category><category>config</category><guid>http://wirecell.github.io/news/posts/default-config-dumper/</guid><pubDate>Thu, 05 Jul 2018 13:15:44 GMT</pubDate></item><item><title>Response Refactoring</title><link>http://wirecell.github.io/news/posts/response-refactoring/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
In WCT we try to follow the mantra "everything is a component".  One
corollary to that is we try to avoid hard-wiring dependencies by
having functionality accessed by hard-wired construction of concrete
classes.  The various classes having to do with responses suffered
from not being available as components.  This led to the entire
toolkit having hard-wired behavior which hampers support for multiple
detectors.  This post describes some recent steps to fix this problem.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/response-refactoring/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>config</category><category>dfp</category><category>graph</category><category>simulation</category><guid>http://wirecell.github.io/news/posts/response-refactoring/</guid><pubDate>Tue, 03 Jul 2018 22:59:30 GMT</pubDate></item><item><title>Pgrapher Configuration Improvements</title><link>http://wirecell.github.io/news/posts/pgrapher-configuration-improvements/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
A powerful new idiom has been developed to simplify developing Jsonnet
configuration files for Wire-Cell toolkit's Pgrapher app component.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/pgrapher-configuration-improvements/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>config</category><category>dfp</category><category>graph</category><category>simulation</category><guid>http://wirecell.github.io/news/posts/pgrapher-configuration-improvements/</guid><pubDate>Fri, 29 Jun 2018 18:33:44 GMT</pubDate></item><item><title>Signal processing now in component form</title><link>http://wirecell.github.io/news/posts/signal-processing-now-in-component-form/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
Following in the footsteps of the recently announced porting of its functionality from the prototype to the toolkit the &lt;b&gt;signal processing&lt;/b&gt;, is now usable in the form of WCT &lt;b&gt;components&lt;/b&gt;. This is important as it paves the way to embedding the signal processing in other applications or frameworks, notably LArSoft.  
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/signal-processing-now-in-component-form/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>config</category><category>devel</category><category>sigproc</category><category>user</category><guid>http://wirecell.github.io/news/posts/signal-processing-now-in-component-form/</guid><pubDate>Mon, 10 Jul 2017 22:16:43 GMT</pubDate></item><item><title>New Configuration Data Package</title><link>http://wirecell.github.io/news/posts/new-configuration-data-package/</link><dc:creator>Brett Viren</dc:creator><description>&lt;p&gt;
Today a new package joins the WCT family.  
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/WireCell/wire-cell-data"&gt;https://github.com/WireCell/wire-cell-data&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This collects the "configuration data" files which are needed for
input to WCT.  These are generally compressed JSON files which have
been converted to a WCT standard format from a variety of sources.
The data includes wire geometry, field response, noise spectra and a
couple initial deposition files.  
&lt;/p&gt;

&lt;p&gt;
Having this repository makes it easier for users to prepare to run
WCT.  At some point in the future this package may be installed along
with the code, but for now, users need to clone this repo.  For WCT to
locate these files the produced directory needs to be added to the
user's &lt;code&gt;WIRECELL_PATH&lt;/code&gt; environment variable.
&lt;/p&gt;

&lt;p&gt;
See the &lt;a href="https://github.com/WireCell/wire-cell-data/blob/master/README.org"&gt;README&lt;/a&gt; file for details including a summary of the files
available and commands to remake these files from their upstream
sources.
&lt;/p&gt;

&lt;p&gt;
Previously this data was kept online &lt;a href="http://www.phy.bnl.gov/~bviren/tmp/wctsim/wct-dev/share/wirecell/data/"&gt;in a directory&lt;/a&gt; dump.  That's
still there for now.  It includes some files not added to GitHub.  In
particular the "upstream" data from which the JSON files are converted
(eg, the Garfield output) can be found.  And next door to that
directory is a &lt;a href="http://www.phy.bnl.gov/~bviren/tmp/wctsim/wct-dev/share/wirecell/plots/"&gt;plot dump directory&lt;/a&gt; which contains some diagnostic
plots related to the conversion of these files which may be useful for
experts to browse.
&lt;/p&gt;</description><category>build</category><category>config</category><category>devel</category><guid>http://wirecell.github.io/news/posts/new-configuration-data-package/</guid><pubDate>Fri, 23 Jun 2017 19:18:19 GMT</pubDate></item><item><title>Jsonnet now mandatory and CLI parameter injection</title><link>http://wirecell.github.io/news/posts/jsonnet-now-mandatory-and-cli-parameter-injection/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://jsonnet.org"&gt;Jsonnet&lt;/a&gt; is now a required external dependency.  
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/jsonnet-now-mandatory-and-cli-parameter-injection/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>build</category><category>config</category><category>devel</category><guid>http://wirecell.github.io/news/posts/jsonnet-now-mandatory-and-cli-parameter-injection/</guid><pubDate>Fri, 16 Jun 2017 18:34:03 GMT</pubDate></item></channel></rss>