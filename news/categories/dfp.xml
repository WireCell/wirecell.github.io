<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wire Cell News (Posts about dfp)</title><link>http://wirecell.github.io/news/</link><description></description><atom:link href="http://wirecell.github.io/news/categories/dfp.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:bv@bnl.gov"&gt;Wire Cell Team&lt;/a&gt; </copyright><lastBuildDate>Sun, 28 Jul 2019 15:57:06 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Response Refactoring</title><link>http://wirecell.github.io/news/posts/response-refactoring/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
In WCT we try to follow the mantra "everything is a component".  One
corollary to that is we try to avoid hard-wiring dependencies by
having functionality accessed by hard-wired construction of concrete
classes.  The various classes having to do with responses suffered
from not being available as components.  This led to the entire
toolkit having hard-wired behavior which hampers support for multiple
detectors.  This post describes some recent steps to fix this problem.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/response-refactoring/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>config</category><category>dfp</category><category>graph</category><category>simulation</category><guid>http://wirecell.github.io/news/posts/response-refactoring/</guid><pubDate>Tue, 03 Jul 2018 22:59:30 GMT</pubDate></item><item><title>Pgrapher Configuration Improvements</title><link>http://wirecell.github.io/news/posts/pgrapher-configuration-improvements/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
A powerful new idiom has been developed to simplify developing Jsonnet
configuration files for Wire-Cell toolkit's Pgrapher app component.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/pgrapher-configuration-improvements/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>config</category><category>dfp</category><category>graph</category><category>simulation</category><guid>http://wirecell.github.io/news/posts/pgrapher-configuration-improvements/</guid><pubDate>Fri, 29 Jun 2018 18:33:44 GMT</pubDate></item><item><title>Pgrapher Execution Engine</title><link>http://wirecell.github.io/news/posts/pgrapher-execution-engine/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
The Wire Cell Toolkit is based on functional components which can be
used as arbitrary "tools" (in the Gaudi sense of the word).  But, they
can also composed together following the paradigm of &lt;i&gt;data flow
programming&lt;/i&gt; (DFP).  Each component thus becomes a node (aka "vertex")
in a graph joined to other nodes via edges that represent the transfer
of data from an output port of one to the input port of the other.  A
new way to perform this execution has been added to WCT in the form of
the Pgrapher app.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/pgrapher-execution-engine/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>dfp</category><category>graph</category><guid>http://wirecell.github.io/news/posts/pgrapher-execution-engine/</guid><pubDate>Fri, 22 Jun 2018 19:16:42 GMT</pubDate></item></channel></rss>