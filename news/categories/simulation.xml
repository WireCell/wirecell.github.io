<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wire-Cell News (Posts about simulation)</title><link>http://wirecell.github.io/news/</link><description></description><atom:link href="http://wirecell.github.io/news/categories/simulation.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:bv@bnl.gov"&gt;Wire-Cell Team&lt;/a&gt; </copyright><lastBuildDate>Fri, 13 Sep 2019 13:28:19 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Response Refactoring</title><link>http://wirecell.github.io/news/posts/response-refactoring/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
In WCT we try to follow the mantra "everything is a component".  One
corollary to that is we try to avoid hard-wiring dependencies by
having functionality accessed by hard-wired construction of concrete
classes.  The various classes having to do with responses suffered
from not being available as components.  This led to the entire
toolkit having hard-wired behavior which hampers support for multiple
detectors.  This post describes some recent steps to fix this problem.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/response-refactoring/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>config</category><category>dfp</category><category>graph</category><category>simulation</category><guid>http://wirecell.github.io/news/posts/response-refactoring/</guid><pubDate>Tue, 03 Jul 2018 22:59:30 GMT</pubDate></item><item><title>Pgrapher Configuration Improvements</title><link>http://wirecell.github.io/news/posts/pgrapher-configuration-improvements/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
A powerful new idiom has been developed to simplify developing Jsonnet
configuration files for Wire-Cell toolkit's Pgrapher app component.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/pgrapher-configuration-improvements/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>config</category><category>dfp</category><category>graph</category><category>simulation</category><guid>http://wirecell.github.io/news/posts/pgrapher-configuration-improvements/</guid><pubDate>Fri, 29 Jun 2018 18:33:44 GMT</pubDate></item><item><title>Basic Simulation Essentially Working and CellTree support</title><link>http://wirecell.github.io/news/posts/basic-simulation-essentially-working-and-celltree-support/</link><dc:creator>Brett Viren</dc:creator><description>&lt;p&gt;
Hanyu Wei has done great job getting the basic drift and response
simulation finished.  In particular it now properly handles the
exceeding fine-scale interpolation that is essential for having
realistically smooth induction signals as a particle's ionization
track moves from the region around one field response path to its
neighbor.  This improvement makes negligible impact on speed.  Also
included is proper drift processes and their statistics as well as the
introduction of an addition RC response for amplifier after the preamp
(for MicroBooNE).  
&lt;/p&gt;

&lt;p&gt;
Hanyu also added a &lt;a href="https://github.com/WireCell/wire-cell-sio/blob/master/src/CelltreeFrameSink.cxx"&gt;new frame sink&lt;/a&gt; to write out "celltree" file format.
This ROOT-based format has been used for a while now to transfer data
between the Wire-Cell Prototype and other applications.
&lt;/p&gt;</description><category>devel</category><category>simulation</category><guid>http://wirecell.github.io/news/posts/basic-simulation-essentially-working-and-celltree-support/</guid><pubDate>Sat, 17 Jun 2017 18:50:06 GMT</pubDate></item></channel></rss>